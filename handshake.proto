syntax = "proto3";

package handshake;

service HandShake {
  rpc ProcessData(ProcessDataRequest) returns (ProcessDataResponse) {}
  rpc SendTable (StackedTable) returns (ArrayResponse) {}
  rpc AggregateLocal (AggregateLocalRequest) returns (AggregateLocalResponse) {}
  rpc AggregateGlobal (AggregateGlobalRequest) returns (AggregateGlobalResponse) {}
  rpc GetResults (GetResultsRequest) returns (StackedTable) {}
  rpc Shutdown( ShutdownRequest) returns (ShutdownResponse) {}
  rpc Hello (HelloRequest) returns (HelloResponse) {}  
  // rpc SendDataFrame(DataFrame) returns (StringResponse) {}
}


// Define message for a single value that can be either double or string
message Value {
  oneof value_type {
    double double_value = 1;
    string string_value = 2;
    int64 long_value = 3;
  }
}

// Define a single column with name and values
message Column {
  string name = 1;
  repeated Value values = 2;
}

// Define a table as a collection of columns
message Table {
  repeated Column columns = 1;
}

// Request message containing the table data
message ProcessDataRequest {
  Table data = 1;
}

// Response message
message ProcessDataResponse {
  string status = 1;
  // Add other response fields as needed
}


message StringResponse {
  string str = 1;
}

message HelloRequest {
  string name = 1;
}

message HelloResponse {
  string reply = 1;
}
  
message ShutdownRequest {}

message ShutdownResponse {
    string status = 1;
}


message StackedTable {
    string doublename = 1;
    repeated double doublevalues = 2;
    string stringname = 3;
    repeated string stringvalues = 4;
}

message ArrayResponse {
  string message = 1;
}

message AggregateLocalRequest {
  repeated int32 ports = 1;
}

message AggregateLocalResponse {
  int32 return_code = 1;
}

message AggregateGlobalRequest {
  repeated int32 ports = 1;
  repeated string servers = 2;
}

message AggregateGlobalResponse {
  int32 return_code = 1;
}

message GetResultsRequest {
    int32 which_results = 1;
}


// message DataFrame {
//   repeated DataColumn columns = 1;
// }

// message DataColumn {
//   string name = 1;
//   repeated ColValue values = 2;

// }

// message ColValue {
//   oneof value_type {
//     double double_value = 1;
//     string string_value = 2;
//     int64 int64_value = 3;
//   }
// }

// enum DataType {
//   STRING = 0;
//   INT64 = 1;
//   FLOAT = 2;
//   BOOL = 3;
//   DOUBLE = 4;
//   DATE = 5;
// }

// message ValuesDatetime {
//   repeated int64 values = 1;
// }

// message ValuesString {
//   repeated string values = 1;
// }

// message ValuesInt64 {
//   repeated int64 values = 1;
// }

// message ValuesFloat {
//   repeated float values = 1;
// }

// message ValuesBool {
//   repeated bool values = 1;
// }

// message ValuesDouble{
//     repeated double values = 1;
// }